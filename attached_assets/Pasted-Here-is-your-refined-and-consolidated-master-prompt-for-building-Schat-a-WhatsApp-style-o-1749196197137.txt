Here is your **refined and consolidated master prompt** for building **"Schat"**, a WhatsApp-style one-on-one messaging app — complete, structured, and ready to hand off to developers or AI tools:

---

## 💬📱 **Prompt: Build “Schat” – A WhatsApp-Like One-on-One Chat Application**

Develop a fully functional, mobile-first chat application called **"Schat"** that mimics the clean, intuitive experience of WhatsApp. The app should support real-time one-on-one messaging with all essential chat features, optimized UI, and a seamless user discovery flow.

---

### ✅ **Core Features:**

1. **User Authentication:**

   * Secure Login & Signup with email and password.
   * Validate inputs with alerts:

     * Email not found: 🔴 *"No account found with this email. Please check and try again."*
     * Wrong password: 🔴 *"Incorrect password. Please try again."*
     * Duplicate signup: 🔴 *"This email is already registered."*
     * Success: ✅ *"Account created successfully. Please sign in to continue."*

2. **One-on-One Chat:**

   * Users can initiate a chat with any other registered user.
   * Chats are **private and encrypted**, visible only to the two participants.
   * Chat room/thread created on first interaction.

3. **Messaging Capabilities:**

   * Text messages
   * Emojis, voice notes, images, and video attachments
   * Typing indicator, read receipts, and timestamps
   * Delete and forward messages

4. **Message Status:**

   * Indicators for sent, delivered, and read (✓, ✓✓, ✓✓ blue)

5. **User Presence & Status:**

   * Online/offline indicator
   * “Last seen” time display

6. **Push Notifications:**

   * Real-time alerts for incoming messages

---

### 🔍 **User Discovery System:**

#### A. **Unique User ID:**

* On signup, assign a permanent ID (e.g., `SCHAT_8KD21A`)
* Shown in user profile
* Cannot be changed
* Backend must ensure global uniqueness

#### B. **Search & Start Chat:**

* Users can search others by unique ID
* Show preview (username + email)
* Exclude self from search results
* Tap “Start Chat” → opens/creates chat thread

#### Example Search Flow:

```
User A signs up → Gets SCHAT_93XK1B
User B signs up → Gets SCHAT_72KDRL
User A enters “SCHAT_72KDRL” → Finds B → Starts private chat
```

---

### 🎨 **UI & UX Design (WhatsApp-Like):**

#### General Layout:

* Top app bar with logo/title and icons (search/settings)
* Bottom nav bar (optional): Chats, Status, Calls

#### Chat Screen:

* Sent messages: right-aligned
* Received messages: left-aligned
* Timestamps, read receipts
* Sticky input bar with emoji, attach, and mic icons
* Smooth scroll & message loading

#### Auth Screens:

* Mobile-first, vertically scrollable single-column layout
* Toasts/snackbars for alerts

---

### 📱 **Mobile Optimization Guidelines:**

* Use responsive units (%, `flex`, etc.)
* Avoid fixed widths/heights
* Ensure compatibility across all phone sizes
* Use Flexbox or responsive components
* Prevent UI overlap (z-index management)
* Test thoroughly on Android and iOS

---

### 🔐 **Technical Requirements:**

* Use backend such as Firebase or MongoDB
* Realtime messaging with WebSockets or Firebase Realtime DB / Firestore
* Store chats in chat threads:

```json
"chats": {
  "chat_abc123": {
    "users": ["userA_id", "userB_id"],
    "messages": [...]
  }
}
```

* Example unique ID generator:

```js
function generateUniqueID(length = 6) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let id = '';
  for (let i = 0; i < length; i++) {
    id += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return `SCHAT_${id}`;
}
```

---

### 🌟 **Nice-to-Have Additions (Optional):**

* End-to-end encryption
* Voice/video calling
* Dark mode or chat themes
* Contacts sync (detect friends already on Schat)
* Archived or starred messages

---

### 🎯 **End Goal:**

Build a production-grade, **WhatsApp-inspired** chat app with:

* Smooth user flow from signup to chat
* Mobile-optimized layout
* Secure and private chat architecture
* Clean, intuitive user interface

---

Let me know if you’d like implementation code, UI mockups, or backend architecture tailored for **Flutter**, **React Native**, **Firebase**, or another stack — I can generate that too.
